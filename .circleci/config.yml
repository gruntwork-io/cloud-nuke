orbs:
  go: circleci/go@1.11.0

# The "sign binary" runs in a MacOS environment, so it's necessary to download GW's binaries
env: &env
  environment:
    GRUNTWORK_INSTALLER_VERSION: v0.0.39
    MODULE_CI_VERSION: v0.53.3

defaults: &defaults
  resource_class: medium+
  docker:
    - image: 087285199408.dkr.ecr.us-east-1.amazonaws.com/circle-ci-test-image-base:go1.21-tf1.5-tg39.1-pck1.8-ci50.7
version: 2.1
jobs:
  test:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: |
            mkdir -p /tmp/logs
            # Run the tests. Note that we set the "-p 1" flag to tell Go to run tests in each package sequentially. Without
            # this, Go buffers all log output until all packages are done, which with slower running tests can cause CircleCI
            # to kill the build after more than 45 minutes without log output.
            DISABLE_TELEMETRY=true run-go-tests --extra-flags '-p 1' --timeout 45m | tee /tmp/logs/all.log
          no_output_timeout: 45m
      - run:
          name: parse test output
          command: terratest_log_parser --testlog /tmp/logs/all.log --outputdir /tmp/logs
          when: always
      - store_artifacts:
          path: /tmp/logs
      - store_test_results:
          path: /tmp/logs

  build:
    <<: *defaults
    steps:
      - checkout
      - run: build-go-binaries --parallel 2 --app-name cloud-nuke --dest-path bin --ld-flags "-X main.VERSION=$CIRCLE_TAG"
      - persist_to_workspace:
          root: .
          paths: bin
  nuke_phx_devops:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: |
            # We explicitly list the resource types we want to nuke, as we are not ready to nuke some resource types in
            # the AWS account we use at Gruntwork for testing (Phx DevOps) (e.g., S3)
            go run  -ldflags="-X 'main.VERSION=$CIRCLE_SHA1'" main.go aws \
              --older-than 2h \
              --force \
              --config ./.circleci/nuke_config.yml \
              --exclude-resource-type iam \
              --exclude-resource-type iam-service-linked-role \
              --exclude-resource-type ecr \
              --exclude-resource-type config-recorders \
              --exclude-resource-type config-rules \
              --exclude-resource-type nat-gateway \
              --exclude-resource-type ec2-subnet \
              --delete-unaliased-kms-keys \
              --log-level debug
          no_output_timeout: 1h
  nuke_sandbox:
    <<: *defaults
    steps:
      - checkout
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=$SANDBOX_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$SANDBOX_AWS_SECRET_ACCESS_KEY
            # We explicitly list the resource types we want to nuke, as we are not ready to nuke some resource types in
            # the AWS account we use at Gruntwork for testing (Sandbox) (e.g., S3)
            go run -ldflags="-X 'main.VERSION=$CIRCLE_SHA1'" main.go aws \
              --older-than 24h \
              --force \
              --config ./.circleci/nuke_config.yml \
              --exclude-resource-type iam \
              --exclude-resource-type iam-service-linked-role \
              --exclude-resource-type ecr \
              --exclude-resource-type config-recorders \
              --exclude-resource-type config-rules \
              --exclude-resource-type eip \
              --exclude-resource-type nat-gateway \
              --exclude-resource-type ec2-subnet \
              --delete-unaliased-kms-keys \
              --log-level debug
          no_output_timeout: 1h
  deploy:
    <<: *env
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - go/install:
          version: "1.20.5"
      - run:
          name: Install sign-binary-helpers
          command: |
            curl -Ls https://raw.githubusercontent.com/gruntwork-io/gruntwork-installer/master/bootstrap-gruntwork-installer.sh | bash /dev/stdin --version "${GRUNTWORK_INSTALLER_VERSION}"
            gruntwork-install --module-name "gruntwork-module-circleci-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
            gruntwork-install --module-name "sign-binary-helpers" --repo "https://github.com/gruntwork-io/terraform-aws-ci" --tag "${MODULE_CI_VERSION}"
      - run:
          name: Compile and sign the binaries
          command: |
            export AC_PASSWORD=${MACOS_AC_PASSWORD}
            export AC_PROVIDER=${MACOS_AC_PROVIDER}
            
            sign-binary --install-macos-sign-dependencies --os mac .gon_amd64.hcl
            sign-binary --os mac .gon_arm64.hcl
            echo "Done signing the binary"

            # Replace the files in bin. These are the same file names generated from .gon_amd64.hcl and .gon_arm64.hcl
            unzip cloud-nuke_darwin_amd64.zip
            mv cloud-nuke_darwin_amd64 bin/

            unzip cloud-nuke_darwin_arm64.zip
            mv cloud-nuke_darwin_arm64 bin/
      - run:
          name: Run SHA256SUM
          command: |
            brew install coreutils
            cd bin && sha256sum * > SHA256SUMS
      - run: upload-github-release-assets bin/*
workflows:
  version: 2
  build-and-test:
    # Make sure this pipeline doesn't run when a schedule is triggered
    when:
      not:
        equal: [scheduled_pipeline, << pipeline.trigger_source >>]
    jobs:
      - test:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
      - build:
          filters:
            tags:
              only: /^v.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
      - deploy:
          requires:
            - build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
            - APPLE__OSX__code-signing
  nuke_phxdevops:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["every 3 hours", << pipeline.schedule.name >>]
    jobs:
      - nuke_phx_devops:
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
  nuke_sandbox:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ["nightly", << pipeline.schedule.name >>]
    jobs:
      - nuke_sandbox:
          context:
            - AWS__PHXDEVOPS__circle-ci-test
            - GITHUB__PAT__gruntwork-ci
            - AWS__SANDBOX__circle-ci
